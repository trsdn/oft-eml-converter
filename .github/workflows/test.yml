name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=. --cov-report=xml
    
    - name: Run unit tests directly
      run: |
        python -m tests.test_converter
    
    - name: Test GUI import (non-interactive)
      run: |
        python -c "import oft_to_eml_gui; print('GUI import successful')"
      continue-on-error: true  # GUI might not work in headless environment
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test CLI converter
      run: |
        # Create a minimal test OFT file (actually, we'll skip this as we need real OFT files)
        echo "CLI integration test would run here with real files"
    
    - name: Test script execution permissions
      run: |
        chmod +x run_gui.sh
        # Test that the script starts correctly (without actually running GUI)
        bash -n run_gui.sh  # Syntax check only

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. Line length set to 88 for black compatibility
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
      continue-on-error: true  # Don't fail CI for formatting issues
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
      continue-on-error: true  # Don't fail CI for import sorting issues
    
    - name: Type checking with mypy
      run: |
        mypy --ignore-missing-imports .
      continue-on-error: true  # Don't fail CI for type issues