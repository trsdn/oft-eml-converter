name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=. --cov-report=xml
    
    - name: Run unit tests directly
      run: |
        python -m tests.test_converter
    
    - name: Test GUI import (non-interactive)
      run: |
        python -c "import oft_to_eml_gui; print('GUI import successful')"
      continue-on-error: true  # GUI might not work in headless environment
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'

  integration-test:
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test CLI converter with mock data
      run: |
        # Create a minimal mock OFT file for testing
        echo "Testing CLI converter..."
        python -c "
        import tempfile, os
        from pathlib import Path
        # Create a temporary mock file
        with tempfile.NamedTemporaryFile(suffix='.oft', delete=False) as f:
            f.write(b'mock data')
            temp_oft = f.name
        print(f'Created mock file: {temp_oft}')
        # Test error handling with invalid file
        try:
            from oft_to_eml_converter import convert_oft_to_eml
            convert_oft_to_eml(temp_oft)
            print('ERROR: Should have failed with invalid file')
        except Exception as e:
            print(f'Expected error occurred: {type(e).__name__}')
        finally:
            os.unlink(temp_oft)
        print('CLI error handling test passed')
        "
    
    - name: Test launcher script permissions and syntax
      if: runner.os != 'Windows'
      run: |
        # Make launcher executable (Unix-like systems)
        if [ "$RUNNER_OS" != "Windows" ]; then
          chmod +x run_gui.sh
          echo "Made launcher executable"
        fi
        
        # Test script syntax
        if [ "$RUNNER_OS" != "Windows" ]; then
          bash -n run_gui.sh
          echo "Bash syntax check passed"
        else
          echo "Skipping bash syntax check on Windows"
        fi
    
    - name: Test virtual environment creation
      run: |
        # Test that we can create and use virtual environments
        echo "Testing virtual environment creation..."
        python -m venv test_venv
        
        # Test that venv was created successfully
        python -c "
        import os
        import sys
        venv_path = 'test_venv'
        if os.path.exists(venv_path):
            print(f'Virtual environment created at: {venv_path}')
            # Check for expected directories
            if sys.platform == 'win32':
                expected = os.path.join(venv_path, 'Scripts', 'python.exe')
            else:
                expected = os.path.join(venv_path, 'bin', 'python')
            if os.path.exists(expected):
                print(f'Python executable found: {expected}')
            else:
                print(f'Warning: Python executable not found at {expected}')
        else:
            print('ERROR: Virtual environment not created')
            sys.exit(1)
        print('Virtual environment test passed')
        "
    
    - name: Test GUI import (headless safe)
      run: |
        echo "Testing GUI module import in headless environment..."
        python -c "
        import sys
        try:
            # Try importing GUI components
            import tkinter as tk
            print('tkinter available')
            
            # Test our GUI module import without initialization
            import oft_to_eml_gui
            print('GUI module imported successfully')
            
            # Test that we can access the class without creating instances
            gui_class = oft_to_eml_gui.OFTtoEMLGUI
            print(f'GUI class accessible: {gui_class.__name__}')
            
        except ImportError as e:
            print(f'Import warning (expected in some environments): {e}')
            sys.exit(0)  # Don't fail the test for missing GUI
        except Exception as e:
            print(f'Unexpected error: {e}')
            sys.exit(1)
        print('GUI import test completed')
        "
    
    - name: Test cross-platform file operations
      run: |
        echo "Testing cross-platform file operations..."
        python -c "
        import os
        import tempfile
        from pathlib import Path
        
        # Test file creation and paths
        with tempfile.TemporaryDirectory() as tmpdir:
            print(f'Temp directory: {tmpdir}')
            
            # Test Path operations
            test_file = Path(tmpdir) / 'test.oft'
            test_file.touch()
            
            output_file = Path(tmpdir) / 'test.eml'
            
            print(f'Input file exists: {test_file.exists()}')
            print(f'Output path: {output_file}')
            
            # Test path resolution
            abs_input = test_file.resolve()
            abs_output = output_file.resolve()
            
            print(f'Absolute input: {abs_input}')
            print(f'Absolute output: {abs_output}')
            
            print('Cross-platform file operations test passed')
        "
    
    - name: Test package requirements
      run: |
        echo "Verifying all required packages are installed..."
        python -c "
        required_packages = [
            'extract_msg',
            'tkinter',  # Built-in, should be available
            'pathlib',  # Built-in
            'email',    # Built-in
            'json',     # Built-in
            'threading' # Built-in
        ]
        
        failed = []
        for pkg in required_packages:
            try:
                __import__(pkg)
                print(f'✓ {pkg}')
            except ImportError as e:
                if pkg == 'tkinter':
                    print(f'⚠ {pkg} (GUI not available - expected in some environments)')
                else:
                    print(f'✗ {pkg}: {e}')
                    failed.append(pkg)
        
        if failed:
            print(f'Missing required packages: {failed}')
            exit(1)
        else:
            print('All required packages available')
        "
    
    - name: Test error handling and edge cases
      run: |
        echo "Testing error handling and edge cases..."
        python -c "
        import os
        import tempfile
        from oft_to_eml_converter import convert_oft_to_eml
        
        # Test 1: Non-existent input file
        try:
            convert_oft_to_eml('nonexistent.oft')
            print('ERROR: Should have failed with non-existent file')
            exit(1)
        except FileNotFoundError:
            print('✓ Non-existent file handling works')
        
        # Test 2: Invalid file extension (but file exists)
        with tempfile.NamedTemporaryFile(suffix='.txt', delete=False) as f:
            f.write(b'not an oft file')
            temp_file = f.name
        
        try:
            # This should fail when trying to parse the file
            convert_oft_to_eml(temp_file)
            print('ERROR: Should have failed with invalid file format')
            exit(1)
        except Exception as e:
            print(f'✓ Invalid file format handling works: {type(e).__name__}')
        finally:
            os.unlink(temp_file)
        
        print('Error handling tests passed')
        "

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. Line length set to 88 for black compatibility
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
      continue-on-error: true  # Don't fail CI for formatting issues
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
      continue-on-error: true  # Don't fail CI for import sorting issues
    
    - name: Type checking with mypy
      run: |
        mypy --ignore-missing-imports .
      continue-on-error: true  # Don't fail CI for type issues